import os,sys
import numpy as np
import matplotlib.pyplot as plt
from config import parse_conf
from Eigenmode import Eigenmode
from scipy.integrate import simps
from scipy.interpolate import interp1d

opt = parse_conf()

def gaussian(xx, mu, sigma):
    return np.exp(-0.5*((xx-mu)/sigma)**2)/(sigma * np.sqrt(2*np.pi))

def rect(xx, x0, x1, v):
    y = [ v if x0<x<x1 else 0.0 for x in xx]
    return np.array(y)

def get_rot_basis():
    data_dir = opt['DATA_dir']
    omega_zero_dir = os.path.join(data_dir, opt['GYRE_stage_dir_omega_zero'])
    model_path = os.path.join(omega_zero_dir, 'MODEL')
    basis = {}
    for eigen_fn in os.listdir(model_path):
        if not eigen_fn.startswith('mode'): continue
        path = os.path.join(model_path, eigen_fn)
        eigenmode = Eigenmode(path)
        order = eigenmode.n_pg
        rr = eigenmode.r_coord
        basis[order] = eigenmode.beta * eigenmode.kernel
    orders = list(basis.keys())
    orders.sort()
    basis_arr = [basis[o] for o in orders]
    return np.array(basis_arr), rr

def get_Fourier_basis():
    xx_f = np.linspace(0, 1, 1000)
    basis = [1+0*xx_f]
    for k in range(1, 11):
        s = np.sin(2*np.pi*k*xx_f)
        c = np.cos(2*np.pi*k*xx_f)
        basis.append(s)
        basis.append(c)
    return np.array(basis), xx_f


def plot_matrix(M):
    plt.imshow(M, origin='lower')
    plt.show()

K, rr = get_rot_basis()


#K, rr = get_Fourier_basis()
M = K.shape[0]
E = np.identity(M+1)
mu = 0.0
A = np.zeros((M+1, M+1))

for i in range(M):
    for j in range(M):
        A[i,j] = simps(K[i,:]*K[j,:], rr)

for i in range(M):
    A[i,M] = simps(K[i,:], rr)
    A[M,i] = A[i,M]

A = A + mu*E

data_dir = opt['DATA_dir']
splittings = np.loadtxt(os.path.join(data_dir, opt['splittings_dir'], 'mock_rot'))[:,1]

Oms = []
x_center_grid = np.linspace(0.1, 0.9, 9)
for x_center in x_center_grid:
    T = gaussian(rr, x_center, 0.01)

    v = np.zeros((M+1,))
    for i in range(M):
        v[i] = simps(K[i]*T, rr)
    v[M] = 1

    c = np.linalg.solve(A, v)

    Om = splittings.dot(c[:-1])

    Oms.append(Om)

plt.plot(x_center_grid, Oms, 'o-')
plt.show()
exit()

plt.plot(rr, H, label='Averaging kernel')
plt.plot(rr, T, label='Target')
plt.legend()
plt.xlabel('r/R')
plt.ylabel('Target function')
plt.show()













